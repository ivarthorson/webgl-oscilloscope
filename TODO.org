* Refactoring
  - [ ] The display of the "scale" variable looks confusing to me. It should have "/div" after it. And "pos" is likewise a little weird.
  - [ ] The camera should be zoomed out so the grid is actually perfect
  - [ ] The grid spacing should reflect what reagent is set to do.
  - [ ] The text entry inputs should respond to enter ke
  - [ ] the text entry inputs should also erase cached linestrip buffers
  - [ ] If there are many many traces coming in, we don't store all of them in the trace-chunks buffer; we just record that they exist in a second data structure.
  - [ ] reagent ":chans" should probably be a hashmap keyed on a UUID of the traces, and should be built from that second data structure.

* Plan
  - [ ] Orthographic view with x, y min and max
  - [ ] Make autoscale buttons work
  - [ ] Text Labels in WebGL (for time sequences)
  - [ ] Clear all button
  - [ ] GL draw thicker traces
  - [ ] Grep for TODOs
  - [ ] Write README
  - [ ] Code refactoring


* Documentation
** Definitions
   "Traces" are little line-segments of data. They come as small pieces (chunks) of data (x-y-z coordinates) that arrive either via a websocket or via HTTP.
   "Signals" are the collections of traces that are logically grouped together. Each signal will have many traces, and in most cases drawing all the traces together will produce a continuous line. 
** Design Notes
   The scrolling effect is created by moving the camera, not the traces. 
   Traces are immutable; once created, they are drawn until they are destroyed. Usually they are destroyed when they are sufficiently old, although a user can also hit the "clear" button. 
   Traces need to be converted into WebGL buffer objects to be drawn. The exact WebGL coordinates of a trace are dependent of the Y-position and Y-scale factors for that trace, so WebGL buffer conversion is a function of both the original trace and the reagent state scaling factors. In other words, f(trace, reagent-state) -> webgl_linestrip_buffer. WebGL linestrips are thus also immutable, but are deleted any time the reagent state buttons modify a display variable. They are recreated automatically as needed.

* Robustness
  - [ ] Ensure that the garbage collection of old webgl buffers is actually occurring

* For Write-Up
  - [ ] Release GIT hub
  - [ ] Start a new feature branch
  - [ ] Make a flow-chart of "buffers" "uniforms" "vertex attributes" and "pixel fragments" on paper

* Optional
  - [ ] Multiple cursor / trace mode
    - [ ] Tracking mode
    - [ ] Display value of traces 
    - [ ] Display diff between two cursors
  - [ ] Vertical Measurement Mode
  - [ ] Horizontal Measurement mode
  - [ ] Add measurements
    - [ ] V_mean
    - [ ] V_RMS, Vpp
    - [ ] Period, Freq
  - [ ] Save screenshot
  - [ ] Save trace data
  - [ ] Display Frame Rate
  - [ ] Resizable window and viewport
  - [ ] Trigger
    - [ ] Once
    - [ ] Repeatedly
    - [ ] Overlay each trace on same screen
  - [ ] Wraparound X mode (mod width of viewport)
  - [ ] X-Y plot mode
  - [ ] FFT

* Supplementary
  - [ ] Look at cljs-webgl's example 6 for the keypress handlers, and steal that 
  - [ ] Joystick code from thesis
