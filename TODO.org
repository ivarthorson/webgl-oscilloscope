* Loops
  rs = {source, chan, pos, scl}
  dat = [{chan, xyzs}
  gl-linestrip-obj = f(rs, dat)
  
** Data->GL object path
   1. [ ] Ensure the data is not too old
   2. [ ] Pure function. f(raw-data, reagent-chans) -> 
** Draw loops
   1. [ ] Expire old traces (easy cuz sorted)
   2. [ ] Create
   3. [ ] Draw the existing traces that are {:checked}
** Reagent
   1. [ ] Uses the "channels" datastructure {:position, :scale, :checked}
   2. [ ] When modified, rebuild all
   3. [ ] If data is getting too stale, show that. 
** Add loop -- from websocket or randomly for now
   1. [ ] Add the fragment to raw-data, keeping it sorted


* Plan
  - [ ] Trace fragments
    - [ ] Adding process (callback)
    - [ ] Expiration process
    - [ ] Check garbage collection
  - [ ] Orthographic view with x, y min and max
  - [ ] Make autoscale buttons work
  - [ ] Text Labels in WebGL (for time sequences)
  - [ ] Clear all button
  - [ ] GL draw thicker traces
  - [ ] Grep for TODOs
  - [ ] Write README
  - [ ] Code refactoring

* For Write-Up
  - [ ] Release GIT hub
  - [ ] Start a new feature branch
  - [ ] Make a flow-chart of "buffers" "uniforms" "vertex attributes" and "pixel fragments" on paper

* Optional
  - [ ] Multiple cursor / trace mode
    - [ ] Tracking mode
    - [ ] Display value of traces 
    - [ ] Display diff between two cursors
  - [ ] Vertical Measurement Mode
  - [ ] Horizontal Measurement mode
  - [ ] Add measurements
    - [ ] V_mean
    - [ ] V_RMS, Vpp
    - [ ] Period, Freq
  - [ ] Save screenshot
  - [ ] Save trace data
  - [ ] Display Frame Rate
  - [ ] Resizable window and viewport
  - [ ] Trigger
    - [ ] Once
    - [ ] Repeatedly
    - [ ] Overlay each trace on same screen
  - [ ] Wraparound X mode (mod width of viewport)
  - [ ] X-Y plot mode
  - [ ] FFT

* Supplementary
  - [ ] Look at cljs-webgl's example 6 for the keypress handlers, and steal that 
  - [ ] Joystick code from thesis
